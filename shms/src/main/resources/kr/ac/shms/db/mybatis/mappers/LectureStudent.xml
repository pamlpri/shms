<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.ac.shms.lecture.dao.LectureStudentDAO">
	<select id="selectStudentWeeksList" parameterType="LectureVO" resultType="LectureVO">
		SELECT
		        a.diary_no,
		        a.lec_code,
		        a.lec_week,
		        TO_CHAR(week_bgnde, '""YYYY"년 "MM"월 "DD"일"') week_bgnde,
       		    TO_CHAR(week_endde, '""YYYY"년 "MM"월 "DD"일"') week_endde,
		        a.diary_title,
		        a.diary_cont,
		        a.week_lec_cl,
		        a.ut_lec_link,
		        a.rt_lec_link,
		        NVL((SELECT sugang_req
		           FROM ut_lec_sg 
		          WHERE a.diary_no = diary_no
		            AND stdnt_no = #{stdnt_no, jdbcType=VARCHAR}), 0) sugang_req,
		        a.sugang_len,
		        <![CDATA[
			        (CASE WHEN week_bgnde <= SYSDATE AND week_endde >= SYSDATE THEN 'Y'
			         ELSE 'N' END) sugang_stat 
		        ]]>
		  FROM  lec_week_diary a
		  WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
		  ORDER BY diary_no DESC
	</select>
	
	<select id="selectStudentWeekDetail" parameterType="LectureVO" resultType="LectureVO">
		SELECT a.diary_no,
		       a.lec_code,
		       a.lec_week,
		       TO_CHAR(week_bgnde, 'YYYY-MM-DD') week_bgnde,
		       TO_CHAR(week_endde, 'YYYY-MM-DD') week_endde,
		       TO_CHAR(week_bgnde, '""YYYY"년 "MM"월 "DD"일"') week_bgnde_char,
		       TO_CHAR(week_endde, '""YYYY"년 "MM"월 "DD"일"') week_endde_char,
		       a.diary_title,
		       a.diary_cont,
		       a.week_lec_cl,
		       a.ut_lec_link,
		       a.rt_lec_link,
		       a.sugang_len,
		       NVL((SELECT sugang_req
		              FROM ut_lec_sg 
		             WHERE a.diary_no = diary_no
		               AND stdnt_no = #{stdnt_no, jdbcType=VARCHAR}), 0) sugang_req
		  FROM lec_week_diary a
		 WHERE a.diary_no = #{diary_no, jdbcType=NUMERIC}
	</select>
	
	<insert id="insertLectureWeek" parameterType="LectureVO">
		MERGE INTO ut_lec_sg A
		USING(
		    SELECT NVL(COUNT(*),0) COUNT
		    FROM ut_lec_sg
		     WHERE stdnt_no = #{stdnt_no, jdbcType=VARCHAR}
		       AND diary_no = #{diary_no, jdbcType=NUMERIC}
		) B
		ON (B.COUNT > 0)
		WHEN MATCHED THEN
		    UPDATE SET sugang_req = #{sugang_req, jdbcType=NUMERIC}
		     WHERE stdnt_no = #{stdnt_no, jdbcType=VARCHAR}
		       AND diary_no = #{diary_no, jdbcType=NUMERIC}
		WHEN NOT MATCHED THEN
		     INSERT
		    ( 		
		        sugang_no,
		        diary_no,
		        stdnt_no,
		        sugang_de,
		        sugang_req 
		    ) VALUES (
		        sugang_seq.nextval,
		        #{diary_no, jdbcType=NUMERIC},
		        #{stdnt_no, jdbcType=VARCHAR},
		        SYSDATE,
		        #{sugang_req, jdbcType=NUMERIC}
		    )
	</insert>
	
	<insert id="insertLectureWeekAttend" parameterType="AttendVO">
		INSERT INTO attendance (
		    atndan_no,
		    attend_date,
		    attend_time,
		    exit_time,
		    attend_stat,
		    lec_code,
		    stdnt_no
		) VALUES (
		    attend_seq.nextval,
		    SYSDATE,
		    null,
		    null,
		    'Y',
		    #{lec_code, jdbcType=VARCHAR},
		    #{stdnt_no, jdbcType=VARCHAR}
		)
	</insert>
	
	<resultMap type="SetTaskVO" id="taskListMap" autoMapping="true">
		<id property="set_task_no" column="set_task_no"/>
		<collection property="submitList" ofType="TaskSubmitVO" autoMapping="true">
			<id property="submit_no" column="submit_no"/>
		</collection>
	</resultMap>
	
	<select id="selectTaskList" parameterType="hashMap" resultMap="taskListMap">
		SELECT
		    DISTINCT
		    a.set_task_no,
		    TO_CHAR(submit_endde, 'YYYY.MM.DD AM HH:MI') submit_endde,
		    CASE WHEN SYSDATE BETWEEN submit_bgnde AND submit_endde THEN
		    '진행중'
		    ELSE
		    '마감'
		    END process_at,
		    task_title,
		    task_allot,
		    task_score,
		    submit_no
		FROM
		    set_task a
		LEFT OUTER JOIN (SELECT set_task_no, submit_no, task_score
		                   FROM task_submit
		                  WHERE writer = #{stdnt_no, jdbcType=VARCHAR}
		                  ) b
		ON(a.set_task_no = b.set_task_no)
		WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
	</select>
	
	<insert id="insertTask" parameterType="TaskSubmitVO">
		<selectKey resultType="int" keyProperty="submit_no" order="BEFORE">
			SELECT task_sub_seq.nextval
			FROM dual
		</selectKey>
			INSERT INTO task_submit (
			    submit_no,
			    set_task_no,
			    title,
			    cont,
			    writer,
			    submit_dt  
			    <if test="attachList != null">
				    ,atch_file_no
			  	</if>
			) VALUES (
			    #{submit_no, jdbcType=NUMERIC},
			    #{set_task_no, jdbcType=NUMERIC},
			    #{title, jdbcType=VARCHAR},
			    #{cont, jdbcType=VARCHAR},
			    #{writer, jdbcType=VARCHAR},
			    TO_DATE(SYSDATE, 'YYYY/MM/DD HH24:MI')
   				<if test="attachList != null">
			    	,(SELECT MAX(atch_file_no) + 1 FROM attach)
			    </if>
			)
	</insert>
	
	<resultMap type="SetTaskVO" id="taskAttachMap" autoMapping="true">
		<id property="set_task_no" column="set_task_no"/>
		<collection property="attachList" ofType="AttachVO" autoMapping="true">
			<id property="atch_file_no" column="atch_file_no"/>
			<id property="atch_file_seq" column="atch_file_seq"/>
		</collection>
		<collection property="taskSubmitList" ofType="TaskSubmitVO" autoMapping="true">
			<id property="submit_no" column="submit_no"/>
		</collection>
	</resultMap>
	
	<select id="selectSetTask" parameterType="hashMap" resultMap="taskAttachMap">
		SELECT
		    set_task_no,
		    task_reg_de,
		    TO_CHAR(submit_endde, 'YYYY.MM.DD AM HH:MI') submit_endde,
		    task_title,
		    task_cont,
		    a.atch_file_no,
		    b.atch_file_seq,
		    b.file_nm,
		    (SELECT submit_no FROM task_submit WHERE set_task_no = #{set_task_no, jdbcType=NUMERIC} AND writer = #{stdnt_no, jdbcType=VARCHAR}) submit_no,
    		(SELECT task_score FROM task_submit WHERE set_task_no = #{set_task_no, jdbcType=NUMERIC} AND writer = #{stdnt_no, jdbcType=VARCHAR}) task_score
		FROM
		    set_task a
		LEFT OUTER JOIN attach b
		ON(a.atch_file_no = b.atch_file_no)
		WHERE
		    set_task_no = #{set_task_no, jdbcType=NUMERIC}
	</select>
	
	
	<resultMap type="TaskSubmitVO" id="taskSubmitMap" autoMapping="true">
		<id property="submit_no" column="submit_no"/>
		<collection property="attachList" ofType="AttachVO" autoMapping="true">
			<id property="atch_file_no" column="atch_file_no"/> 
			<id property="atch_file_seq" column="atch_file_seq"/> 
		</collection>
	</resultMap>
	<select id="selectTaskSubmit" parameterType="int" resultMap="taskSubmitMap">	
		SELECT
		    submit_no,
		    a.set_task_no,
		    title,
		    cont,
		    writer,
		    c.name,
		    d.sub_name,
		    submit_dt,
		    task_score,
		    a.atch_file_no,
		    b.atch_file_seq,
		    b.file_nm,
        	e.task_allot
		FROM
		    task_submit a
		    LEFT OUTER JOIN attach b
		    ON(a.atch_file_no = b.atch_file_no)
		    INNER JOIN student c 
     		ON(a.writer = c.stdnt_no)
 		    INNER JOIN subject d
		    ON(c.sub_code = d.sub_code)
		    INNER JOIN set_task e
		    ON(a.set_task_no = e.set_task_no)		    
		WHERE
		    submit_no = #{submit_no, jdbcType=NUMERIC}
	</select>

	<update id="updateTask" parameterType="TaskSubmitVO">
		UPDATE task_submit
		    SET
		    title = #{title, jdbcType=VARCHAR},
		    cont = #{cont, jdbcType=NUMERIC}
		WHERE
		    submit_no = #{submit_no}
	</update>
	
	<select id="selectExamList" parameterType="hashMap" resultType="ExamVO">
		SELECT a.exam_no,
		       test_cl,
		       req_semstr||'학기'||DECODE(test_cl, 'JG', ' 중간고사', ' 기말고사') test_nm,
		       CASE WHEN SYSDATE BETWEEN exam_begin_dt AND exam_end_dt THEN
		       '진행중'
		       ELSE 
		       '마감' 
		       END test_stat,
		       a.lec_code,
		       exam_begin_dt,
		       exam_end_dt,
		       TO_CHAR(exam_begin_dt, 'YYYY.MM.DD AM HH:MI') exam_begin_dt_char,
		       TO_CHAR(exam_end_dt, 'YYYY.MM.DD AM HH:MI') exam_end_dt_char,
		       online_at,
		       exam_type,
		       ques_cnt,
		       a.atch_file_no,
		       b.stdnt_no,
		       c.applcn_no,
		       DECODE(c.applcn_no, null, '미응시', '응시') applcn_at
		  FROM exam a
		  CROSS JOIN (SELECT stdnt_no, req_semstr
		                     FROM sugang_req
		                    WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		                      AND sugang_at = 'Y') b
		  LEFT OUTER JOIN take_exam c
		    ON (a.exam_no = c.exam_no AND b.stdnt_no = c.stdnt_no)
		 WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
		   AND b.stdnt_no = #{stdnt_no, jdbcType=VARCHAR}
		 ORDER BY exam_end_dt desc
	</select>	
	
	<select id="selectExamInfo" parameterType="int" resultType="ExamVO">
		SELECT exam_no,
		       (SELECT estbl_semstr FROM lecture WHERE lec_code='L160201901')||'학기'||DECODE(test_cl, 'JG', ' 중간고사', ' 기말고사') test_nm,
		       ROUND((exam_end_dt - exam_begin_dt) * 24 * 60, 2) exam_time,
		       TO_CHAR(exam_begin_dt, 'YYYY.MM.DD AM HH:MI') exam_begin_dt_char,
		       TO_CHAR(exam_end_dt, 'YYYY.MM.DD AM HH:MI') exam_end_dt_char,
		       online_at
		  FROM exam
		 WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
	</select>
</mapper>