<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.ac.shms.lecture.dao.LectureProfessorDAO">
	<select id="staff" parameterType="String" resultType="StaffVO">
		SELECT
		    staff_no,
		    dept_code,
		    sub_code,
		    emp_section,
		    encpn_de,
		    retire_de,
		    contract_endde,
		    staff_rspofc,
		    prof_at,
		    name,
		    tel_no,
		    regno1,
		    regno2,
		    gen,
		    zipcode,
		    addr1,
		    addr2,
		    email,
		    webmail,
		    account,
		    bank_name,
		    photo_path
		FROM
		    staff
		WHERE staff_no = #{staff_no, jdbcType=VARCHAR}
	</select>
	
	<sql id="taskSearchFrag">
		 WHERE lec_code IN(
	        SELECT lec_code 
	         FROM lecture a
	        INNER JOIN curriculum b 
	           ON(a.cur_code = b.cur_code)
	        WHERE staff_no= #{staff_no, jdbcType=VARCHAR}
	          AND a.estbl_year = EXTRACT(YEAR FROM SYSDATE)
	          AND estbl_semstr = (SELECT semstr FROM v_semstr)
	</sql>
	
	<select id="selectTask" parameterType="String" resultType="SetTaskVO">
		SELECT set_task_no,
		       a.lec_code,
		       task_reg_de,
		       submit_bgnde,
		       submit_endde,
		       task_title,
		       task_cont,
		       task_allot,
		       atch_file_no,
		       submit_cnt,
		       total_cnt
		  FROM (
		SELECT a.set_task_no,
		       lec_code,
		       TO_CHAR(task_reg_de, 'YYYY.MM.DD') task_reg_de,
		       TO_CHAR(submit_bgnde, 'YYYY.MM.DD') submit_bgnde,
		       TO_CHAR(submit_endde, 'YYYY.MM.DD') submit_endde,
		       task_title,
		       task_cont,
		       task_allot,
		       a.atch_file_no,
		       COUNT(b.submit_no) OVER (PARTITION BY a.set_task_no) submit_cnt
		  FROM SET_TASK a
		 LEFT OUTER JOIN task_submit b
		 ON(a.set_task_no = b.set_task_no)
			<include refid="taskSearchFrag"/>
		           AND TO_CHAR(SYSDATE) BETWEEN submit_bgnde AND submit_endde
		 )
		 ) a INNER JOIN 
		 (
		    SELECT
		        lec_code,
		        COUNT(stdnt_no) total_cnt
		      FROM sugang_req
			<include refid="taskSearchFrag"/>
		               AND sugang_at = 'Y' 
		        )
		     GROUP BY lec_code
		 ) b
		 ON (a.lec_code = b.lec_code)	
	</select>
	
	<select id="selectTodayLecList" parameterType="String" resultType="LectureVO">
		SELECT lec_code,
		       LPAD(lec_time, 2, '0')||':00 - '||
		       LPAD(lec_time + lec_pnt, 2, '0')||':00' lec_full_time,
		       lec_name
		  FROM lecture a
		 INNER JOIN curriculum b
		   ON(a.cur_code = b.cur_code)
		 WHERE staff_no = #{staff_no, jdbcType=VARCHAR}
		   AND abolec = 'N'
		   AND a.estbl_year = EXTRACT(YEAR FROM SYSDATE)
		   AND estbl_semstr = (SELECT semstr FROM v_semstr)
		   AND TO_NUMBER(dayotw) = (SELECT TO_CHAR(SYSDATE, 'D') FROM DUAL)
	</select>
	
	<select id="selectLecListForOpen" parameterType="String" resultType="LectureVO">
		SELECT lec_code, lec_name 
		  FROM lecture a 
		 INNER JOIN curriculum b 
		    ON(a.cur_code = b.cur_code) 
		 WHERE a.estbl_year = EXTRACT(YEAR FROM SYSDATE)
		   AND a.estbl_semstr = (SELECT semstr FROM v_semstr)
		   AND b.staff_no = #{staff_no, jdbcType=VARCHAR}
		   AND summary IS NULL
	</select>
	
	<select id="selectLecForOpen" parameterType="String" resultType="SugangVO">
		SELECT 
		    lec_code,
		    cur_code,
		    lec_cl,
		   (SELECT com_code_nm
		      FROM tb_com_code
		     WHERE code_grp = 'G06'
		       AND lec_cl = com_code ) lec_cl_nm,
		    lec_name,
		    estbl_year,
		    estbl_semstr,
		    summary,
		    tchmtr,
		    adi_tchmtr,
		    tchmtr_scope,
		    lec_rm,
		    dayotw,
		   (SELECT com_code_nm
		      FROM tb_com_code
		     WHERE code_grp = 'G19'
		       AND dayotw = com_code ) dayotw_nm,
		    (lec_time - 8) || ' - ' || (lec_time + lec_pnt - 8 - 1) || '교시' lec_full_time,
		    abolec,
		    staff_no,
		    name,
		    atch_file_no
			  FROM(
				SELECT 
				    lec_code,
				    a.cur_code,
				    a.lec_cl,
				    b.lec_name,
				    a.estbl_year,
				    a.estbl_semstr,
				    summary,
				    tchmtr,
				    adi_tchmtr,
				    tchmtr_scope,
				    lec_rm,
				    dayotw,
				    lec_time,
				    abolec,
				    b.staff_no,
				    lec_pnt,
				    c.name,
				    atch_file_no
				 FROM lecture a
				INNER JOIN curriculum b 
				ON(a.cur_code = b.cur_codE)
				INNER JOIN staff c
				ON(b.staff_no = c.staff_no)
				WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
			) 
	</select>
	
	<update id="updateLecture" parameterType="SugangVO">
		UPDATE lecture
		    SET
	        summary = #{summary, jdbcType=VARCHAR},
	        tchmtr = #{tchmtr, jdbcType=VARCHAR},
	        adi_tchmtr = #{adi_tchmtr, jdbcType=VARCHAR}
  			<if test="attachList != null">
			    , atch_file_no = (SELECT MAX(atch_file_no) + 1 FROM attach)
			</if>
		WHERE
		    lec_code = #{lec_code, jdbcType=VARCHAR}
	</update>
	
	<insert id="insertLectureDetails" parameterType="SugangVO">
		INSERT INTO lec_score_st (
		    lec_code,
		    midterm,
		    finals,
		    attend,
		    task,
		    etc
		) VALUES (
		    #{lec_code, jdbcType=VARCHAR},
		    #{midterm, jdbcType=NUMERIC} / 100,
		    #{finals, jdbcType=NUMERIC} / 100,
		    #{attend, jdbcType=NUMERIC} / 100,
		    #{task, jdbcType=NUMERIC} / 100,
		    #{etc, jdbcType=NUMERIC} / 100
		)
	</insert>
	
	
	<update id="updateLectureDetails" parameterType="SugangVO">
		UPDATE lec_score_st
		    SET
			   midterm = #{midterm, jdbcType=NUMERIC} / 100,
			   finals = #{finals, jdbcType=NUMERIC} / 100,
			   attend = #{attend, jdbcType=NUMERIC} / 100,
			   task = #{task, jdbcType=NUMERIC} / 100,
			   etc = #{etc, jdbcType=NUMERIC} / 100
		WHERE
		    lec_code = #{lec_code, jdbcType=VARCHAR} 
	</update>	
	
	<insert id="insertWeeks" parameterType="LectureVO">
		INSERT INTO lec_week_diary 
		(
		    diary_no,
		    lec_code,
		    lec_week,
		    week_bgnde,
		    week_endde,
		    diary_title,
		    diary_cont,
		    week_lec_cl
		   <if test="ut_lec_link != null and @org.apache.commons.lang3.StringUtils@isNotBlank(ut_lec_link)">
			    ,ut_lec_link
			    ,sugang_len
		    </if>
		    <if test="rt_lec_link != null and @org.apache.commons.lang3.StringUtils@isNotBlank(rt_lec_link)">
			    ,rt_lec_link
		    </if>
		) VALUES (
		    lec_week_seq.nextval,
		    #{lec_code, jdbcType=VARCHAR},
		    #{lec_week, jdbcType=NUMERIC},
		    #{week_bgnde, jdbcType=DATE},
		    #{week_endde, jdbcType=DATE},
		    #{diary_title, jdbcType=VARCHAR},
		    #{diary_cont, jdbcType=VARCHAR},
		    #{week_lec_cl, jdbcType=VARCHAR}
		    <if test="ut_lec_link != null and @org.apache.commons.lang3.StringUtils@isNotBlank(ut_lec_link)">
			    ,#{ut_lec_link, jdbcType=VARCHAR}
			    ,#{sugang_len, jdbcType=NUMERIC}
		    </if>
		    <if test="rt_lec_link != null and @org.apache.commons.lang3.StringUtils@isNotBlank(rt_lec_link)">
			    ,#{rt_lec_link, jdbcType=VARCHAR}
		    </if>
		)
	</insert>
	
	<select id="selectWeeksMaxWeek" parameterType="String" resultType="int">
		SELECT
		    COUNT(lec_week)
		FROM
		    lec_week_diary
		WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
	</select>
	
	<insert id="insertSetTask" parameterType="SetTaskVO">
		<selectKey resultType="int" keyProperty="set_task_no" order="BEFORE">
			SELECT task_seq.nextval  
			FROM dual
		</selectKey>
			INSERT INTO set_task (
			    set_task_no,
			    lec_code,
			    task_reg_de,
			    submit_bgnde,
			    submit_endde,
			    task_title,
			    task_cont,
			    task_allot
   			  	<if test="attachList != null">
				    ,atch_file_no
			  	</if>
			) VALUES (
			    #{set_task_no},
			    #{lec_code, jdbcType=VARCHAR},
			    TO_DATE(SYSDATE, 'YYYY/MM/DD HH24:MI'),
			    TO_DATE(SYSDATE, 'YYYY/MM/DD HH24:MI'),
			    TO_DATE(#{submit_endde, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
			    #{task_title, jdbcType=VARCHAR},
			    #{task_cont, jdbcType=VARCHAR},
			    #{task_allot, jdbcType=NUMERIC}
				<if test="attachList != null">
			    	,(SELECT MAX(atch_file_no) + 1 FROM attach)
			    </if>
			)
	</insert>
	
	
	<select id="selectWeeksList" parameterType="String" resultType="LectureVO">
		SELECT diary_no,
		       lec_code,
		       lec_week,
		       TO_CHAR(week_bgnde, '""YYYY"년 "MM"월 "DD"일"') week_bgnde,
       		   TO_CHAR(week_endde, '""YYYY"년 "MM"월 "DD"일"') week_endde,
		       diary_title,
		       diary_cont,
		       week_lec_cl,
		       ut_lec_link,
		       rt_lec_link
		  FROM lec_week_diary
		 WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		 ORDER BY diary_no DESC
	</select>
	
	<select id="selectWeekDetail" parameterType="int" resultType="LectureVO">
		SELECT diary_no,
		       lec_code,
		       lec_week,
		       TO_CHAR(week_bgnde, 'YYYY-MM-DD') week_bgnde,
		       TO_CHAR(week_endde, 'YYYY-MM-DD') week_endde,
		       TO_CHAR(week_bgnde, '""YYYY"년 "MM"월 "DD"일"') week_bgnde_char,
		       TO_CHAR(week_endde, '""YYYY"년 "MM"월 "DD"일"') week_endde_char,
		       diary_title,
		       diary_cont,
		       week_lec_cl,
		       ut_lec_link,
		       rt_lec_link
		  FROM lec_week_diary
		 WHERE diary_no = #{diary_no, jdbcType=NUMERIC}
	</select>
	
	<update id="updateWeek" parameterType="LectureVO">
		UPDATE lec_week_diary
		   SET
		       week_bgnde = #{week_bgnde, jdbcType=DATE},
		       week_endde = #{week_endde, jdbcType=DATE},
		       diary_title = #{diary_title, jdbcType=VARCHAR},
		       diary_cont = #{diary_cont, jdbcType=VARCHAR},
		       week_lec_cl = #{week_lec_cl, jdbcType=VARCHAR},
		       ut_lec_link = #{ut_lec_link, jdbcType=VARCHAR},
		       rt_lec_link = #{rt_lec_link, jdbcType=VARCHAR}
		WHERE
		    diary_no = #{diary_no, jdbcType=NUMERIC}
	</update>
	
	<select id="selectSetTaskList" parameterType="String" resultType="SetTaskVO">
		SELECT
		    DISTINCT
		    a.set_task_no,
		    TO_CHAR(submit_endde, 'YYYY.MM.DD AM HH:MI') submit_endde,
		    CASE WHEN SYSDATE BETWEEN submit_bgnde AND submit_endde THEN
		    '진행중'
		    ELSE
		    '마감'
		    END process_at,
		    task_title,
		    COUNT(DECODE(task_score, null, null, 1)) OVER (PARTITION BY b.set_task_no) grade_cnt,
		    COUNT(writer) OVER (PARTITION BY a.set_task_no) submit_cnt,
		    (SELECT COUNT(stdnt_no) FROM sugang_req WHERE lec_code = #{lec_code, jdbcType=VARCHAR} AND sugang_at = 'Y') total_cnt
		FROM
		    set_task a
		LEFT OUTER JOIN task_submit b 
		ON(a.set_task_no = b.set_task_no)
		WHERE lec_code = #{lec_code, jdbcType=VARCHAR} 
		ORDER BY submit_endde desc
	</select>
	
	<select id="selectSetTaskInfo" parameterType="hashMap" resultType="SetTaskVO">
		SELECT
		    DISTINCT
		    a.set_task_no,
		    TO_CHAR(submit_endde, 'YYYY.MM.DD AM HH:MI') submit_endde,
		    CASE WHEN SYSDATE BETWEEN submit_bgnde AND submit_endde THEN
		    '진행중'
		    ELSE
		    '마감'
		    END process_at,
		    task_allot,
		    task_title,
		    COUNT(DECODE(task_score, null, null, 1)) OVER (PARTITION BY b.set_task_no) grade_cnt,
		    COUNT(writer) OVER (PARTITION BY a.set_task_no) submit_cnt,
		    (SELECT COUNT(stdnt_no) FROM sugang_req WHERE lec_code = #{lec_code, jdbcType=VARCHAR} AND sugang_at = 'Y') total_cnt
		FROM
		    set_task a
		LEFT OUTER JOIN task_submit b 
		ON(a.set_task_no = b.set_task_no)
		WHERE LEC_CODE = #{lec_code, jdbcType=VARCHAR}
		  AND a.set_task_no = #{set_task_no, jdbcType=VARCHAR}
	</select>
	
	<resultMap type="SetTaskVO" id="setTaskMap" autoMapping="true">
		<id property="set_task_no" column="set_task_no"/> 
		<collection property="attachList" ofType="AttachVO" autoMapping="true">
			<id property="atch_file_no" column="atch_file_no"/>
			<id property="atch_file_seq" column="atch_file_seq"/>
		</collection>
	</resultMap>
	<select id="selectSetTask" parameterType="int" resultMap="setTaskMap">
		SELECT
		    set_task_no,
		    lec_code,
		    task_reg_de,
		    submit_bgnde,
		    submit_endde,
		    task_title,
		    task_cont,
		    task_allot,
		    a.atch_file_no,
   		    b.atch_file_seq,
		    b.file_nm
		FROM
		    set_task a
		    LEFT OUTER JOIN attach b
		    ON(a.atch_file_no = b.atch_file_no)
		WHERE
		    set_task_no = #{set_task_no, jdbcType=NUMERIC}
	</select>
	
	<update id="updateSetTask" parameterType="SetTaskVO">
		UPDATE set_task
		    SET
		        task_title = #{task_title, jdbcType=VARCHAR},
		        task_cont = #{task_cont, jdbcType=VARCHAR},
		        submit_endde = TO_DATE(#{submit_endde, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
		        task_allot = #{task_allot, jdbcType=NUMERIC}
		WHERE
		    set_task_no = #{set_task_no, jdbcType=NUMERIC}
	</update>
	
	<select id="selectTaskSubmitList" parameterType="hashMap" resultType="TaskSubmitVO">
		WITH stdntList AS
		(
		SELECT a.stdnt_no writer,
		       name,
		       sub_name
		  FROM sugang_req a
		 INNER JOIN student b
		   ON (a.stdnt_no = b.stdnt_no)
		 INNER JOIN subject c
		   ON (b.sub_code = c.sub_code)
		 WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		) 
		SELECT distinct a.writer,
		       name,
		       sub_name,
		       submit_no,
		       task_score
		  FROM stdntList a
		  LEFT OUTER JOIN (SELECT submit_no,
		                          set_task_no,
		                          writer,
		                          submit_dt,
		                          task_score
		                     FROM task_submit
		  WHERE set_task_no = #{set_task_no, jdbcType=NUMERIC}) b
		    ON (a.writer = b.writer)
		  ORDER BY a.writer
	</select>

	<delete id="deleteWeek" parameterType="int">
		DELETE FROM lec_week_diary
		 WHERE diary_no = #{diary_no, jdbcType=NUMERIC}
	</delete>	
	
	<insert id="insertExam" parameterType="ExamVO">
		<selectKey resultType="int" keyProperty="exam_no" order="BEFORE">
			SELECT exam_seq.NEXTVAL
			  FROM DUAL
		</selectKey>
		INSERT INTO exam (
		    exam_no,
		    test_cl,
		    lec_code,
		    exam_begin_dt,
		    exam_end_dt,
		    online_at,
		    exam_type,
		    ques_cnt
		    <if test="attachList != null">
			    ,atch_file_no
		  	</if>
		) VALUES (
		    #{exam_no},
		    #{test_cl, jdbcType=VARCHAR},
		    #{lec_code, jdbcType=VARCHAR},
		    TO_DATE(#{exam_begin_dt, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
		    TO_DATE(#{exam_end_dt, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
		    #{online_at, jdbcType=VARCHAR},
		    #{exam_type, jdbcType=VARCHAR},
		    #{ques_cnt, jdbcType=NUMERIC}
		    <if test="attachList != null">
		    	,(SELECT MAX(atch_file_no) + 1 FROM attach)
		    </if>
		)
	</insert>
	
	<insert id="insertQues" parameterType="ExamVO">
		INSERT ALL
		<foreach collection="quesList" item="ques" index="idx">
		INTO exam_ques (
		    exam_no,
		    ques_no,
		    ques_type,
		    ques_ans,
		    ques_allot
		) VALUES (
		    #{exam_no},
		    #{ques.ques_no, jdbcType=NUMERIC},
		    #{ques.ques_type, jdbcType=VARCHAR},
		    #{ques.ques_ans, jdbcType=VARCHAR},
		    #{ques.ques_allot, jdbcType=NUMERIC}
		)
		</foreach>
		SELECT * FROM DUAL
	</insert>
	
	<select id="selectExamList" parameterType="String" resultType="ExamVO">
		SELECT exam_no,
		       test_cl,
		       (SELECT DISTINCT req_semstr FROM sugang_req WHERE lec_code = 'L160201901')||'학기'||DECODE(test_cl, 'JG', ' 중간고사', ' 기말고사') test_nm,
		       <![CDATA[
			       (CASE WHEN exam_begin_dt > SYSDATE THEN '진행전'
			        WHEN exam_begin_dt <= SYSDATE AND SYSDATE <= exam_end_dt THEN '진행중'
			        WHEN exam_end_dt < SYSDATE THEN '마감' END) test_stat,
		       ]]>
		       exam_begin_dt,
		       exam_end_dt,
		       TO_CHAR(exam_begin_dt, 'YYYY.MM.DD AM HH:MI') exam_begin_dt_char,
       		   TO_CHAR(exam_end_dt, 'YYYY.MM.DD AM HH:MI') exam_end_dt_char,
		       (SELECT COUNT(a.stdnt_no)
		          FROM sugang_req a
		         WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
		           AND lec_code = a.lec_code) stdnt_cnt,
		       (SELECT COUNT(b.exam_no)
		          FROM take_exam b
		         WHERE b.exam_no = exam_no) exam_cnt
		  FROM exam
		 WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		 ORDER BY exam_no DESC
	</select>
	
	<resultMap type="ExamVO" id="examMap" autoMapping="true">
		<id property="exam_no" column="exam_no"/> 
		<collection property="attachList" ofType="AttachVO" autoMapping="true">
			<id property="atch_file_no" column="atch_file_no"/>
			<id property="atch_file_seq" column="atch_file_seq"/>
		</collection>
	</resultMap>
	<select id="selectExamDetail" parameterType="ExamVO" resultMap="examMap">
		 SELECT exam_no,
		        lec_code,
		        test_cl,
		        (SELECT DISTINCT req_semstr FROM sugang_req WHERE lec_code = 'L160201901')||'학기'||DECODE(test_cl, 'JG', ' 중간고사', ' 기말고사') test_nm,
		        online_at,
		        <![CDATA[
			       (CASE WHEN exam_begin_dt > SYSDATE THEN '진행전'
			        WHEN exam_begin_dt <= SYSDATE AND SYSDATE <= exam_end_dt THEN '진행중'
			        WHEN exam_end_dt < SYSDATE THEN '마감' END) test_stat,
		       ]]>
		        exam_type,
		        (SELECT SUM(ques_allot)
		           FROM exam_ques
		          WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
		            AND ques_type = 'GG') gg_sum,
		        (SELECT SUM(ques_allot)
		           FROM exam_ques
		          WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
		            AND ques_type = 'DD') dd_sum,
		        (SELECT SUM(ques_allot)
		           FROM exam_ques
		          WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
		            AND ques_type = 'SS') ss_sum,
		        (SELECT SUM(ques_allot)
		           FROM exam_ques
		          WHERE exam_no = #{exam_no, jdbcType=NUMERIC}) ques_sum,
		        (SELECT COUNT(ques_no)
		           FROM exam_ques
		          WHERE exam_no = #{exam_no, jdbcType=NUMERIC}) ques_cnt,
		        ROUND((exam_end_dt - exam_begin_dt) * 24 * 60, 2) exam_time,
		        TO_CHAR(exam_begin_dt, 'YYYY.MM.DD AM HH:MI') exam_begin_dt_char,
       		    TO_CHAR(exam_end_dt, 'YYYY.MM.DD AM HH:MI') exam_end_dt_char,
		        exam_begin_dt,
		        exam_end_dt,
		        (SELECT COUNT(b.stdnt_no)
		           FROM sugang_req b
		          WHERE b.lec_code = #{lec_code, jdbcType=VARCHAR}
		            AND lec_code = a.lec_code) stdnt_cnt,
		        (SELECT COUNT(b.exam_no)
		           FROM take_exam b
		          WHERE b.exam_no = a.exam_no) exam_cnt,
		        a.atch_file_no,
	   		    b.atch_file_seq,
			    b.file_nm
		   FROM exam a
		  		LEFT OUTER JOIN attach b ON(a.atch_file_no = b.atch_file_no)
		  WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		    AND exam_no = #{exam_no, jdbcType=NUMERIC}
	</select>
		
	<select id="selectExamStudentList" parameterType="ExamVO" resultType="ExamVO">
		SELECT a.exam_no,
		       a.lec_code,
		       b.stdnt_no,
		       d.name,
		       (SELECT sub_name
		          FROM subject
		         WHERE d.sub_code = sub_code) sub_name,
		       c.applcn_no,
		       DECODE(c.applcn_no, null, '미응시', '응시') applcn_at,
		       (SELECT SUM(ques_allot)
		          FROM v_selectquesscore
		         WHERE stdnt_no = b.stdnt_no
		           AND exam_no = #{exam_no, jdbcType=NUMERIC}
		           AND ques_type = 'GG'
		           AND ans_at = 'Y') gg_sum,
		       (SELECT SUM(ques_allot)
		          FROM v_selectquesscore
		         WHERE stdnt_no = b.stdnt_no
		           AND exam_no = #{exam_no, jdbcType=NUMERIC}
		           AND ques_type = 'DD'
		           AND ans_at = 'Y') dd_sum,
		        (SELECT SUM(ques_allot)
		          FROM v_selectquesscore
		         WHERE stdnt_no = b.stdnt_no
		           AND exam_no = #{exam_no, jdbcType=NUMERIC}
		           AND ques_type = 'SS'
		           AND ans_at = 'Y') ss_sum,
		        c.res_score
		  FROM exam a
		  CROSS JOIN (SELECT stdnt_no
		                     FROM sugang_req
		                    WHERE lec_code = #{lec_code, jdbcType=VARCHAR}
		                      AND sugang_at = 'Y') b
		  LEFT OUTER JOIN take_exam c
		    ON (a.exam_no = c.exam_no AND b.stdnt_no = c.stdnt_no)
		  INNER JOIN student d ON(b.stdnt_no = d.stdnt_no)
		 WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
		   AND a.exam_no = #{exam_no, jdbcType=NUMERIC}
		 ORDER BY b.stdnt_no ASC
	</select>
	
	<select id="selectQuesList" parameterType="int" resultType="QuesVO">
		SELECT exam_no,
		       ques_no,
		       ques_type,
		       ques_ans,
		       ques_allot
		  FROM exam_ques
		 WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
		 ORDER BY ques_no ASC
	</select>
	
	<update id="updateExam" parameterType="ExamVO">
		UPDATE exam
		   SET  test_cl = #{test_cl, jdbcType=VARCHAR},
		        exam_begin_dt = TO_DATE(#{exam_begin_dt, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
		        exam_end_dt = TO_DATE(#{exam_end_dt, jdbcType=DATE}, 'YYYY/MM/DD HH24:MI'),
		        online_at = #{online_at, jdbcType=VARCHAR},
		        exam_type = #{exam_type, jdbcType=VARCHAR},
		        ques_cnt = #{ques_cnt, jdbcType=NUMERIC}
		WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
	</update>
	
	<delete id="updateQues" parameterType="int">
		DELETE FROM exam_ques
		 WHERE exam_no = #{exam_no, jdbcType=NUMERIC}
	</delete>
	
	<update id="updateTaskScore" parameterType="TaskSubmitVO">
		UPDATE task_submit
		   SET
		       task_score = #{task_score, jdbcType=NUMERIC}
		WHERE
		    submit_no = #{submit_no, jdbcType=NUMERIC}
	</update>
	
	<select id="selectAttendStudentList" parameterType="AttendVO" resultType="AttendVO">
		SELECT DISTINCT a.stdnt_no,
		       c.name,
		       (SELECT sub_name
		          FROM subject
		         WHERE sub_code = c.sub_code) sub_name,
		       b.week1,
		       b.week2,
		       b.week3,
		       b.week4,
		       b.week5,
		       b.week6,
		       b.week7,
		       b.week8,
		       b.week9,
		       b.week10,
		       b.week11,
		       b.week12,
		       b.week13,
		       b.week14,
		       b.week15,
		       (SELECT COUNT(stdnt_no)
		          FROM v_lecweek
		         WHERE attend_stat = 'CS'
		           AND stdnt_no = a.stdnt_no) cs_cnt,
		       (SELECT COUNT(stdnt_no)
		          FROM v_lecweek
		         WHERE attend_stat = 'GS'
		           AND stdnt_no = a.stdnt_no) gs_cnt,
		        (SELECT COUNT(stdnt_no)
		          FROM v_lecweek
		         WHERE attend_stat = 'JT'
		           AND stdnt_no = a.stdnt_no) jt_cnt,
		        (SELECT COUNT(stdnt_no)
		          FROM v_lecweek
		         WHERE attend_stat = 'JG'
		           AND stdnt_no = a.stdnt_no) jg_cnt
		  FROM attendance a
		       INNER JOIN v_lecweek_attend b ON(a.lec_code = b.lec_code AND a.stdnt_no = b.stdnt_no)
		       INNER JOIN student c ON(a.stdnt_no = c.stdnt_no)
		 WHERE a.lec_code = #{lec_code, jdbcType=VARCHAR}
	</select>
</mapper>